---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Rails Girls App Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Переконайсь, що у тебе встановлено Rails.** Якщо ж ні, [**скористайся інструкціями для встановлення**](/install).


## Знайомство з інструментами

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Текстовий редактор

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim та Emacs є прикладами текстових редакторів, що можуть використовуватись для написання коду та редагування файлів.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Термінал (також відомий як Командний Рядок у Windows)

* Тут ти запускаєш сервер rails та виконуєш команди.

<h3><i class="icon-browser">&nbsp;</i></h3>

### Веб оглядач

* (Firefox, Safari, Chrome) знадобляться тобі для перегляду створеного вами додатку.

</div>

### Важливо

Важлива ремарка: ти повинна обрати інструкції відповідно до операційної системи. Команди, які потрібно виконати у Windows, дещо відрізняються від команд для Mac або Linux. Якщо ти стикнулась із проблемами — перевір перемикач операційних систем знизу під командами. У випадку, якщо ти користуєшся cloud service (наприклад nitrous), використовуй команди, призначені для Linux (навіть у випадку, якщо ти у цей час користуєшся Windows).

## *1.*Створення додатку

Ми створимо новий Rails додаток і назвемо його *railsgirls*.

Отже, відкриємо термінал:

* Mac OS X: Відкрий Spotlight, введи *Terminal* та натисни по додатку *Terminal*.
* Windows: Натисни Start та знайди *Command Prompt*, потім натисни *Command Prompt with Ruby on Rails*.
* Linux (Ubuntu/Fedora): Знайди *Terminal* на стільниці та натисни *Terminal*.
* Cloud service (наприклад nitrous): Увійди у свій обліковий запис, запусти середовище та перемкнися на його IDE (читай [інструкії для встановлення](/install#using-a-cloud-service) для деталей). Термінал зазвичай відображається у нижній частині вікна твого веб оглядача.

Далі, виконай наступні команди у терміналі:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Можна переконатись переконатись, що директорія із назвою <code>projects</code> була створена, виконавши команду: <code>ls</code>. Ти повинна побачити директорію <code>projects</code> у отриманому списку. Тепер потрібно змінити поточну директорію на <code>projects</code>, виконавши:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Ти можеш переконатись, що зараз знаходишся у порожній директорії, виконавши вже знайому команду <code>ls</code>. Тепер потрібно створити новий додаток із назвою <code>railsgirls</code>:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Це створить новий додаток у директорії <code>railsgirls</code>, тож тобі знову потрібно змінити поточну директорію, щоб опинитись всередині нашого Rails додатку:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Якщо ти знову виконаєш <code>ls</code> всередині директорії, то побачишу списку директорій <code>app</code> та <code>config</code>. Тепер ви можете запустити сервер rails, виконавши:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Можна переконатись, що директорія із назвою <code>projects</code> була створена, виконавши команду: <code>dir</code>. Ти повинна побачити директорію <code>projects</code> у отриманому списку. Тепер потрібно змінити поточну директорію на <code>projects</code>, виконавши:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Ти можеш переконатись, що зараз знаходишся у порожній директорії, виконавши вже знайому команду <code>dir</code>. Тепер потрібно створити новий додаток із назвою <code>railsgirls</code>:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Це створить новий додаток у директорії <code>railsgirls</code>, тож тобі знову потрібно змінити поточну директорію, щоб опинитись всередині нашого Rails додатку:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Якщо ти знову виконаєш <code>dir</code> всередині директорії, то побачишу списку директорій <code>app</code> та <code>config</code>. Тепер ви можете запустити сервер rails, виконавши:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>

Відкрий <http://localhost:3000> у веб оглядачі. Якщо використовуєш cloud service (наприклад nitrous), використовуйте їхній функціонал попереднього перегляду (читай [інструкії для встановлення](/install#using-a-cloud-service) для деталей).

Ти повинна побачити сторінку "Welcome aboard", що свідчитиме про успіх генерації проекту.

Зверни увагу, у цьому вікні командний рядок недоступний, тому що ти запустила сервер Rails. Командний рядок виглядає наступним чином:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

Коли командний рядок недоступний, не можна виконувати нові команди. Якщо ти спробуєш виконати `cd` чи будь-яку іншу команду, вона не спрацює. Щоб повернутися у звичний режим:

Натисни `CTRL-C` у терміналі, щоб зупинити сервер Rails.

**Наставник:** Поясніть, що виконує кожна команда. Що було згенеровано? Що робить сервер?


## *2.*Створюємо scaffold для Idea

Ми будемо використовувати функцію Rails, яка називається scaffold. Вона дає можливість швидко створити точку для старту, що дозволить переглядати, додавати, видаляти, редагувати та переглядати об’єкти (list, add, remove, edit, view things), у нашому випадку це ідеї.

**Наставник:** Що таке Rails scaffolding? (Поясніть команду, назву моделі і згенеровану таблицю у БД, угоди найменування, типи і атрибути, тощо.) Що таке міграції і для чого вони нам потрібні?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

Генератор (scaffold) створює нові файли у директорії проекту, однак для того, щоб все запрацювало, тобі слід виконати кілька інших команд. Вони оновлять нашу БД та перезапустять сервер.

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
bin/rake db:migrate
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
ruby bin/rake db:migrate
rails server
{% endhighlight %}
  </div>
</div>

Відкрий <http://localhost:3000/ideas> у веб оглядачі. Користувачі, що використовують cloud service (наприклад nitrous) повинні додати '/ideas' до їхнього попереднього url (читай [інструкії для встановлення](/install#using-a-cloud-service)).

Огляньмо і потестуймо те, що ти створила скориставшись кількома простими командами у терміналі.

Натисни `CTRL-C` у терміналі, щоб зупинити сервер Rails, коли набридне досліджувати створений сайт.


## *3.*Дизайн

**Наставник:** Розказати про зв'язок між HTML і Rails. Якою частиною шаблонів (views) є HTML і що таке Embedded Ruby (ERB)? Що таке MVC і як це його стосується? (Моделі та контроллери відповідальні за генерацію HTML шаблонів.)

Наш додаток поки виглядає не дуже привабливо. Давай прикрасимо його. Ми будемо використовувати Twitter Bootstrap щоб легко і просто стилізувати наш сайт.

Відкриємо `app/views/layouts/application.html.erb` у текстовому редакторі і над рядком

{% highlight erb %}
<%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
{% endhighlight %}

додамо

{% highlight erb %}
<link rel="stylesheet" href="//railsgirls.com/assets/bootstrap.css">
<link rel="stylesheet" href="//railsgirls.com/assets/bootstrap-theme.css">
{% endhighlight %}

і замінимо

{% highlight erb %}
<%= yield %>
{% endhighlight %}

на

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Давай також додамо панель  навігації і нижню частину до сайту. У тому ж самому файлі під тегом `<body>` додамо

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

і перед `</body>` додамо

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls Lviv 2015
  </div>
</footer>
<script src="//railsgirls.com/assets/bootstrap.js"></script>
{% endhighlight %}

Тепер давай змінимо вигляд таблиці з ідеями. Відкрий `app/assets/stylesheets/application.css` і внизу файла додай

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

Тепер переконаємося, що ми зберегли всі зміни і оновимо сторінку в браузері. Ти також можеш продовжувати змінювати HTML & CSS.

У випадку, якщо у терміналі відображається повідомлення про проблеми із JavaScript або CoffeeScript, встанови [nodejs](http://nodejs.org/download/). Ця проблема не мала б з'являтись, якщо ми використовували RailsInstaller (лише якщо ти встановлювала Rails через ```gem install rails```).

**Наставник:** Розкажіть трохи про CSS і макети (layouts).


## *4.*Додамо завантаження зображень

Нам потрібно встановити додаткову бібліотеку, яка дозволить завантажувати файли.

За допомогою текстового редактора відкриємо `Gemfile` в директорії проекту і під рядком

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

додамо

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Наставник:** Пояснити, що таке бібліотеки і чим вони корисні. Розказати про вільне програмне забезпечення (open source).

Натисни `CTRL-C` у терміналі, щоб зупинити сервер Rails.

У терміналі запустимо:

{% highlight sh %}
bundle
{% endhighlight %}


Це встановить бібліотеку додану до `Gemfile`.

Тепер ми можемо згенерувати код, який буде відповідати за завантаження. Запустимо у терміналі:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Після цього запустимо сервер rails.

*Увага*: Дехто може використовувати другий термінал, у якому постійно запущений сервер Rails. В такому випадку потрібно **перезапустити Rails процес**. Це необхідно для того, щоб додаток завантажив додану бібліотеку.

Відкриємо `app/models/idea.rb` і під рядком

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

додамо

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Відкриємо `app/views/ideas/_form.html.erb` і замінимо

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

на

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

Інколи може виникати помилка *TypeError: can't cast ActionDispatch::Http::UploadedFile to string*.

Якщо це трапилось, у файлі `app/views/ideas/_form.html.erb` потрібно замінити рядок

{% highlight erb %}
<%= form_for(@idea) do |f| %>
{% endhighlight %}

на

{% highlight erb %}
<%= form_for @idea, :html => {:multipart => true} do |f| %>
{% endhighlight %}

У вашому веб оглядачі додамо нову ідею з зображенням. На жаль, отриманий результат не надто красивий, оскільки замість картинки ми бачимо лиш шлях до неї. Це легко виправити:

Відкриємо `app/views/ideas/show.html.erb` і замінимо

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

на

{% highlight erb %}
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
{% endhighlight %}

Тепер можна оновити сторінку в браузері і милуватись завантаженим зображенням.

**Наставник:** Трішки розкажіть про HTML.


## *5.*Налаштування маршрутів

Відкрий <http://localhost:3000> (або url поперднього перегляду, якщо ти використовуєш cloud service). Ти все ще бачиш сторінку "Welcome aboard". Давай зробимо перенаправлення на сторінку з ідеями.

Відкрий `config/routes.rb` і після першого рядка додай

{% highlight ruby %}
root :to => redirect('/ideas')
{% endhighlight %}

Щоб перевірити зміни, відкрий кореневий шлях (<http://localhost:3000/> або url попереднього перегляду для cloud service) у своєму браузері.

**Наставник:** Розказати про маршрути, включно із деталями про їх порядок і зв'язок зі статичними файлами.

**Rails 3 users:** Щоб це спрацювало, потрібно видалити `index.html` з директорії `/public/`.

## Створимо статичну сторінку

Давай додамо статичну сторінку, в якій міститиметься інформація про автора додатку - тебе!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

Ця команда створить нову директорію всередині `app/views`, яка називатиметься `/pages` і міститиме файл `info.html.erb`, який і є нашою інформаційною сторінкою.

Також це додасть простий маршрут до `routes.rb`

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Терер можна відкрити `app/views/pages/info.html.erb` і додати інформацію про себе в HTML. Щоб поглянути на нову сторінку, у браузері перейди до <http://localhost:3000/pages/info> або, якщо ти користуєшся cloud service, додай `/pages/info` до свого url попереднього перегляду.

## *6+.*Що далі?

* Стилізуй дизайн використовуючи HTML &amp; CSS
* Додай оцінки
* Використовуй CoffeeScript (або JavaScript) щоб додати інтерактивної взаємодії
* Додай зміну розмірів картинок, щоб вони вантажились швидше


## Додаткова інформація

* Guide 0: [Handy cheatsheet for Ruby, Rails, console etc.](https://github.com/PragTob/rails-beginner-cheatsheet)
* Guide 1: [Додаємо коментування by Janika Liiv](/commenting)
* Guide 2: [Розгортання проекту на Heroku by Terence Lee](/heroku) / [Put your app online with OpenShift by Katie Miller](/openshift) / [Put your app online with Shelly Cloud](/shellycloud) / [Put your app online with anynines](/anynines) / [Put your app online with Trucker.io](/trucker)
* Guide 3: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 4: [Додамо дизайну за допомогою HTML &amp; CSS by Alex Liao](/design)
* Guide 5: [Додаємо можливість реєстрації користувачів by Piotr Steininger](/devise/)
* Guide 6: [Використання Gravatar](/gravatar)
* Guide 7: [Test your app with RSpec](/testing-rspec)
* Guide 8: [Continuous Deployment with Travis-CI](/continuous-travis) / [Continuous Deployment with Codeship](/continuous)
* Guide 9: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
